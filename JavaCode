import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class SalesTaxCalculator {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of items: ");
        int numItems = scanner.nextInt();
        scanner.nextLine(); 

        List<Item> items = new ArrayList<>();

        System.out.println("Enter the items :-");

        for (int i = 0; i < numItems; i++) {
            String input = scanner.nextLine();

            items.add(Item.parse(input));
        }

        scanner.close();

        
        for (Item item : items) {
            item.calculateAndPrintReceipt();
        }

        
        BigDecimal totalSalesTaxes = BigDecimal.ZERO;
        BigDecimal totalAmount = BigDecimal.ZERO;

        for (Item item : items) {
            BigDecimal salesTax = item.calculateSalesTax();
            BigDecimal finalPrice = item.getPrice().add(salesTax);

            totalSalesTaxes = totalSalesTaxes.add(salesTax);
            totalAmount = totalAmount.add(finalPrice);
        }

        System.out.println("Sales Taxes: $" + totalSalesTaxes);
        System.out.println("Total: $" + totalAmount);
    }
}

interface Taxable {
    BigDecimal calculateSalesTax();
}

class Item implements Taxable {
    private int quantity;
    private String description;
    private BigDecimal price;
    private boolean isImported;

    public Item(int quantity, String description, BigDecimal price, boolean isImported) {
        this.quantity = quantity;
        this.description = description;
        this.price = price;
        this.isImported = isImported;
    }

    public static Item parse(String input) {
        String[] parts = input.split(" at ");
        if (parts.length == 2) {
            String[] itemInfo = parts[0].split("\\s+");
            if (itemInfo.length >= 3) {
                int quantity = Integer.parseInt(itemInfo[0]);
                boolean isImported = input.contains("imported");
                String description = input.substring(input.indexOf(itemInfo[1]), input.indexOf(" at "));
                BigDecimal price = new BigDecimal(parts[1]);

                return new Item(quantity, description, price, isImported);
            }
        }
        throw new IllegalArgumentException("Invalid input format: " + input);
    }

    public String getDescription() {
        return description;
    }

    public BigDecimal getPrice() {
        return price;
    }

    public boolean isImported() {
        return isImported;
    }

    @Override
    public BigDecimal calculateSalesTax() {
        BigDecimal basicSalesTaxRate = isExempted() ? BigDecimal.ZERO : new BigDecimal("0.10"); 
        BigDecimal importDutyRate = isImported ? BigDecimal.valueOf(0.05) : BigDecimal.ZERO; 

        BigDecimal basicSalesTax = price.multiply(basicSalesTaxRate);
        basicSalesTax = roundToNearestFiveCents(basicSalesTax);
        BigDecimal importDuty = price.multiply(importDutyRate);
        importDuty = roundToNearestFiveCents(importDuty);

        return basicSalesTax.add(importDuty);
    }

    public void calculateAndPrintReceipt() {
        BigDecimal salesTax = calculateSalesTax();
        BigDecimal finalPrice = price.add(salesTax);

        System.out.println(quantity + " " + description + ": " + finalPrice);
    }

    private BigDecimal roundToNearestFiveCents(BigDecimal value) {
        BigDecimal nearest = value.divide(new BigDecimal("0.05"), 0, RoundingMode.UP);
        return nearest.multiply(new BigDecimal("0.05"));
    }

    private boolean isExempted() {
        
        return description.toLowerCase().contains("book") || description.toLowerCase().contains("food") || description.toLowerCase().contains("medicine");
    }
}
